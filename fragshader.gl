#version 330 core
out vec4 FragColor;
  
in vec3 ourColor;
in vec2 TexCoord;

uniform sampler2D ourTexture;


vec3 rgb2hsl(vec4 rgba);
vec3 hsl2rgb(vec3 hsl);

void main()
{
		vec4 pixelclr = texture(ourTexture, TexCoord);
		vec3 HSL			=	rgb2hsl(pixelclr);

		vec3 HSL_mod = vec3(HSL.xyz);	
	
		HSL_mod.z  =  (HSL.z * 0.5)/(HSL.z);

//		HSL_mod.z  =  0.45;

//		HSL_mod.y  = HSL_mod.y + 0.15;
//			HSL_mod.z  = HSL_mod.z - 0.05;

//		if(HSL_mod.z < HSL.z){
//			HSL_mod.z = HSL.z;
//		}

	/*	
		if(HSL.z <= 0.75f && HSL.z > 0.0){
			HSL.z  = HSL.z + 0.2f;
		}
*/
		vec3 RGB			= hsl2rgb(HSL_mod);

		RGB = RGB - vec3(0.1);

 	  FragColor = vec4(RGB,1.0);
}


vec3 hsl2rgb(vec3 hsl){

	float chroma = (1 - abs(2 * hsl.z - 1)) * hsl.y;
	float hue_prime = hsl.x / 60;
	float x = chroma * (1 - abs( mod(hue_prime, 2) -1));

	vec3 rgb1;

	if((0<=hue_prime) && (hue_prime < 1)){
		rgb1 = vec3(chroma, x, 0);	

	}else if((1<=hue_prime) && (hue_prime < 2)){
		rgb1 = vec3(x, chroma,0);	

	}else	if((2<=hue_prime) && (hue_prime < 3)){
		rgb1 = vec3(0, chroma, x);	

	}else	if((3<=hue_prime) && (hue_prime < 4)){
		rgb1 = vec3(0, x, chroma);	
	
	}else	if((4<=hue_prime) && (hue_prime < 5)){
		rgb1 = vec3(x,0, chroma);	\

	}else	if((5<=hue_prime) && (hue_prime < 6)){
		rgb1 = vec3(chroma, 0, x);	
	
	}

	float m = hsl.z - (chroma/2);

	vec3 rgb = vec3( rgb1.x + m , rgb1.y + m, rgb1.z + m);

	return vec3(rgb);
}

vec3 rgb2hsl(vec4 rgba){
/*
		for the input color is an alpha of 1.0f assumed
		https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB	
*/

	float xmax = max(max(rgba.x, rgba.y), rgba.z);
	float xmin = min(min(rgba.x, rgba.y), rgba.z);
	float chroma = xmax - xmin;
	float lightness = (xmax + xmin) / 2;
	float hue;
	if(xmax == rgba.x){
		//max == red	

		hue = 60 * (  mod((rgba.y - rgba.z)/chroma, 6 ) );

	}else if(xmax == rgba.y){
		//max == green	
	
		hue = 60 * (((rgba.z - rgba.x)/chroma) + 2 );

	}else if(xmax == rgba.z){
		//red == blue
		
		hue = 60 * (((rgba.x - rgba.y)/chroma) + 4 );

	}else if(chroma == 0.0f){
		hue = 0.0f;	
	}

	float sv;
	if(xmax == 0.0f){
		sv = 0.0f;
	}else{
		sv = chroma/xmax;
	}

	float sl;
	if((lightness == 0.0f) || (lightness == 1.0f)){
		sl = 0;
	}else{
		sl = (xmax - lightness) / min(lightness, 1- lightness);
	}

	return vec3(hue, sl, lightness);
}
